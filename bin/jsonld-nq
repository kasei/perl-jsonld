#!/usr/bin/env perl

use v5.18;
use autodie;
use utf8;
use File::Spec;
use JSON;
use JSONLD;
use Attean;
use open ':std', ':encoding(UTF-8)';

package MyJSONLD {
	use v5.14;
	use autodie;
	use Moo;
	use Attean::RDF;
	extends 'JSONLD';
	use namespace::clean;
	
	sub default_graph {
		return iri('http://attean.example.org/default-graph');
	}

	sub add_quad {
		my $self	= shift;
		my $triple	= shift;
		my $ds		= shift;
		$ds->add_quad($triple);
	}

	sub new_dataset {
		my $self	= shift;
		my $store	= Attean->get_store('Memory')->new();
		return $store;
	}
	
	sub new_triple {
		my $self	= shift;
		foreach my $v (@_) {
			Carp::confess "not a term object" unless (ref($v));
		}
		return triple(@_);
	}
	
	sub new_quad {
		my $self	= shift;
		foreach my $v (@_) {
			Carp::confess "not a term object: $v" unless (ref($v));
		}
		return quad(@_);
	}
	
	sub new_graphname {
		my $self	= shift;
		my $value	= shift;
		if ($value =~ /^_:(.+)$/) {
			$value	= 'tag:gwilliams@cpan.org,2019-12:JSONLD:skolem:' . $1;
		}
		return $self->new_iri($value);
	}

	sub new_iri {
		my $self	= shift;
		return iri(shift);
	}
	
	sub new_blank {
		my $self	= shift;
		return blank(@_);
	}
	
	sub new_lang_literal {
		my $self	= shift;
		my $value	= shift;
		my $lang	= shift;
		return langliteral($value, $lang);
	}
	
	sub new_dt_literal {
		my $self	= shift;
		my $value	= shift;
		my $dt		= shift;
		return dtliteral($value, $dt);
	}
}


my $data;
my $base;
my $j		= JSON->new->pretty(1)->canonical(1)->allow_nonref(1);
while (scalar(@ARGV) and $ARGV[0] =~ /^-(\w+)$/) {
	my $flag	= $1;
	shift;
	if ($flag eq 'v') {
		$JSONLD::debug	= 1;
	}
}

if (scalar(@ARGV)) {
	my $file	= shift;
	open(my $fh, '<:utf8', $file);
	$data	= $j->decode(do { local($/); <$fh> });
	$base	= 'file://' . File::Spec->rel2abs($file);
} else {
	$data	= $j->decode(do { local($/); <> });
	$base	= 'http://base.example.org/';
}

my $jld			= MyJSONLD->new(base_iri => IRI->new($base));
my $default_graph	= $jld->default_graph();
my $iter			= eval {
	my $qiter	= $jld->to_rdf($data)->get_quads()->materialize();
	my $iter	= Attean::CodeIterator->new(generator => sub {
		my $q	= $qiter->next;
		return unless ($q);
		if ($q->graph->equals($default_graph)) {
			return $q->as_triple;
		} else {
			return $q;
		}
	}, item_type => 'Attean::API::TripleOrQuad')->materialize;
};
if ($@) {
	die $@;
}

my $ser	= Attean->get_serializer('nquads')->new();
$ser->serialize_iter_to_io(\*STDOUT, $iter);
